{"version":3,"file":"patchbay.umd.js","sources":["../src/Point.js","../src/Cable.js","../src/Patchbay.js"],"sourcesContent":["class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.oldX = x;\n    this.oldY = y;\n  }\n\n  update(gravity) {\n    const vx = this.x - this.oldX;\n    const vy = this.y - this.oldY + gravity;\n\n    this.oldX = this.x;\n    this.oldY = this.y;\n\n    this.x += vx;\n    this.y += vy;\n  }\n}\n\nexport default Point;\n","import Point from \"./Point\";\n\n/**\n * @typedef {Object} CableConfig\n * @property {HTMLElement|Point} start - The start element to attach the cable to.\n * @property {HTMLElement|Point} end - The end element to attach the cable to.\n * @property {string} [color='#000000'] - The color of the cable.\n * @property {number} [dragHandleSize=25] - The size of the drag handles.\n * @property {number} [gravity=1] - The gravity factor of the cable.\n * @property {number} [iterations=5] - The number of iterations to solve constraints.\n * @property {number} [lineThickness=2] - The thickness of the cable line.\n * @property {number} [segments=20] - The number of segments in the cable.\n * @property {number} [slack=1.1] - The slack factor of the cable.\n * @property {number} [snapRadius=100] - The radius for snapping to connector elements.\n * @property {string} [snapTargetSelector='.cable-connector'] - The selector for snap target elements.\n * @property {boolean} [draggable=true] - Whether the cable start/end points are draggable.\n */\n\nclass Cable {\n  config = {\n    color: \"#000000\",\n    dragHandleSize: 25,\n    gravity: 1,\n    iterations: 5,\n    lineThickness: 2,\n    segments: 20,\n    slack: 1.1,\n    snapRadius: 100,\n    snapTargetSelector: \".cable-connector\",\n    draggable: true,\n  };\n\n  /**\n   * @param {CableConfig} [config] - The configuration object to override default settings.\n   */\n  constructor(config = {}) {\n    this.config = { ...this.config, ...config };\n    this.start = this.config.start;\n    this.end = this.config.end;\n\n    this.isDragging = false;\n    this.draggedEnd = null;\n\n    this.element = this.createMainElement();\n    this.points = this.initializePoints();\n    this.segmentElements = this.createSegmentElements();\n\n    if (this.config.draggable) {\n      this.setupDragHandles();\n      this.setupDragEvents();\n    }\n  }\n\n  createMainElement() {\n    const element = document.createElement(\"div\");\n    element.classList.add(\"cable-container\");\n    element.style.position = \"fixed\";\n    element.style.top = \"0\";\n    element.style.left = \"0\";\n    element.style.pointerEvents = \"none\";\n    return element;\n  }\n\n  initializePoints() {\n    const startPos = this.getElementCenter(this.start);\n    const endPos = this.getElementCenter(this.end);\n    const points = [new Point(startPos.x, startPos.y)];\n    const dx = endPos.x - startPos.x;\n    const dy = endPos.y - startPos.y;\n    const totalLength = Math.sqrt(dx * dx + dy * dy) * this.config.slack;\n    const segmentLength = totalLength / (this.config.segments - 1);\n\n    for (let i = 1; i < this.config.segments - 1; i++) {\n      const t = i / (this.config.segments - 1);\n      points.push(\n        new Point(\n          startPos.x + dx * t + (Math.random() - 0.5) * segmentLength,\n          startPos.y + dy * t + (Math.random() - 0.5) * segmentLength,\n        ),\n      );\n    }\n    points.push(new Point(endPos.x, endPos.y));\n    return points;\n  }\n\n  /**\n   * Get the center of an element or point.\n   *\n   * @param {HTMLElement|Point|{x: number, y: number}} element\n   * @returns {{x, y}|null|{x: number, y: number}}\n   */\n  getElementCenter(element) {\n    if (element instanceof Point || (element.hasOwnProperty(\"x\") && element.hasOwnProperty(\"y\"))) {\n      return {\n        x: element.x,\n        y: element.y,\n      };\n    }\n\n    if (element instanceof HTMLElement) {\n      const { height, left, top, width } = element.getBoundingClientRect();\n      return {\n        x: left + width / 2,\n        y: top + height / 2,\n      };\n    }\n\n    return null;\n  }\n\n  setupDragHandles() {\n    this.startHandle = this.createDragHandle();\n    this.endHandle = this.createDragHandle();\n    this.element.appendChild(this.startHandle);\n    this.element.appendChild(this.endHandle);\n  }\n\n  setupDragEvents() {\n    this.startHandle.addEventListener(\"mousedown\", (e) => this.startDragging(e, \"start\"));\n    this.endHandle.addEventListener(\"mousedown\", (e) => this.startDragging(e, \"end\"));\n\n    document.addEventListener(\"mousemove\", (e) => this.drag(e));\n    document.addEventListener(\"mouseup\", (e) => this.stopDragging(e));\n  }\n\n  createDragHandle() {\n    const handle = document.createElement(\"div\");\n    handle.classList.add(\"cable-drag-handle\");\n    handle.style.width = `${this.config.dragHandleSize}px`;\n    handle.style.height = `${this.config.dragHandleSize}px`;\n    handle.style.position = \"absolute\";\n    handle.style.borderRadius = \"50%\";\n    handle.style.backgroundColor = \"transparent\";\n    handle.style.pointerEvents = \"all\";\n    handle.style.cursor = \"move\";\n    handle.style.zIndex = \"9999\";\n    return handle;\n  }\n\n  startDragging(event, end) {\n    this.isDragging = true;\n    this.draggedEnd = end;\n\n    if (end === \"start\") {\n      this.start = null;\n    } else {\n      this.end = null;\n    }\n  }\n\n  drag(event) {\n    if (!this.isDragging) return;\n    const { clientX, clientY } = event;\n    if (this.draggedEnd === \"start\") {\n      this.points[0].x = clientX;\n      this.points[0].y = clientY;\n    } else {\n      this.points[this.points.length - 1].x = clientX;\n      this.points[this.points.length - 1].y = clientY;\n    }\n\n    this.update();\n  }\n\n  stopDragging() {\n    if (!this.isDragging) return;\n\n    const draggedPoint = this.draggedEnd === \"start\" ? this.points[0] : this.points[this.points.length - 1];\n    const snapTarget = this.findSnapTarget(draggedPoint.x, draggedPoint.y);\n\n    if (snapTarget) {\n      if (this.draggedEnd === \"start\") {\n        this.start = snapTarget;\n      } else {\n        this.end = snapTarget;\n      }\n      const center = this.getElementCenter(snapTarget);\n      draggedPoint.x = center.x;\n      draggedPoint.y = center.y;\n    }\n\n    this.isDragging = false;\n    this.draggedEnd = null;\n    this.update();\n  }\n\n  findSnapTarget(x, y) {\n    const potentialTargets = document.querySelectorAll(this.config.snapTargetSelector);\n\n    let closestElement = null;\n    let closestDistance = Infinity;\n\n    for (let element of potentialTargets) {\n      const rect = element.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElement = element;\n      }\n    }\n\n    // Only return the closest element if it's within the snap radius\n    return closestDistance <= this.config.snapRadius ? closestElement : null;\n  }\n\n  createSegmentElements() {\n    return this.points.slice(0, -1).map((_, index) => {\n      const segment = document.createElement(\"div\");\n      segment.classList.add(\"cable-segment\");\n      segment.style.position = \"absolute\";\n      segment.style.background = this.config.color;\n      segment.style.height = this.config.lineThickness + \"px\";\n      segment.style.transformOrigin = \"0 50%\";\n      this.element.appendChild(segment);\n      return segment;\n    });\n  }\n\n  update() {\n    if (this.start) {\n      const center = this.getElementCenter(this.start);\n      this.points[0].x = center.x;\n      this.points[0].y = center.y;\n    }\n    if (this.end) {\n      const center = this.getElementCenter(this.end);\n      this.points[this.points.length - 1].x = center.x;\n      this.points[this.points.length - 1].y = center.y;\n    }\n\n    // Apply gravity\n    for (let i = 1; i < this.points.length - 1; i++) {\n      this.points[i].y += this.config.gravity;\n    }\n\n    // Solve constraints\n    for (let j = 0; j < this.config.iterations; j++) {\n      this.solveConstraints();\n    }\n\n    this.render();\n  }\n\n  solveConstraints() {\n    const segmentLength = this.calculateSegmentLength();\n    for (let i = 0; i < this.points.length - 1; i++) {\n      const p1 = this.points[i];\n      const p2 = this.points[i + 1];\n      const dx = p2.x - p1.x;\n      const dy = p2.y - p1.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const difference = (segmentLength - distance) / distance;\n      const offsetX = dx * 0.5 * difference;\n      const offsetY = dy * 0.5 * difference;\n\n      if (i > 0) {\n        p1.x -= offsetX;\n        p1.y -= offsetY;\n      }\n      if (i < this.points.length - 2) {\n        p2.x += offsetX;\n        p2.y += offsetY;\n      }\n    }\n  }\n\n  calculateSegmentLength() {\n    const totalLength = this.calculateTotalLength();\n    return totalLength / (this.config.segments - 1);\n  }\n\n  calculateTotalLength() {\n    const start = this.points[0];\n    const end = this.points[this.points.length - 1];\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    return Math.sqrt(dx * dx + dy * dy) * this.config.slack;\n  }\n\n  render() {\n    this.segmentElements.forEach((segment, index) => {\n      const p1 = this.points[index];\n      const p2 = this.points[index + 1];\n      const dx = p2.x - p1.x;\n      const dy = p2.y - p1.y;\n      const length = Math.sqrt(dx * dx + dy * dy);\n      const angle = Math.atan2(dy, dx);\n\n      segment.style.width = `${length}px`;\n      segment.style.left = `${p1.x}px`;\n      segment.style.top = `${p1.y}px`;\n      segment.style.transform = `rotate(${angle}rad)`;\n    });\n\n    if (this.config.draggable) {\n      this.updateDragHandlePosition(this.startHandle, this.points[0]);\n      this.updateDragHandlePosition(this.endHandle, this.points[this.points.length - 1]);\n    }\n  }\n\n  updateDragHandlePosition(handle, point) {\n    handle.style.left = `${point.x - this.config.dragHandleSize / 2}px`;\n    handle.style.top = `${point.y - this.config.dragHandleSize / 2}px`;\n  }\n}\n\nexport default Cable;\n","import Cable from \"./Cable.js\";\n\n/**\n * @typedef {Object} PatchbayConfig\n * @property {HTMLElement} [container=document.body] - The container element for the patchbay.\n * @property {number} [gravity=1] - The gravity force applied to cables.\n * @property {number} [iterations=5] - The number of constraint solving iterations per update.\n * @property {string} [color='#000000'] - The default color of cables.\n * @property {number} [slack=1.1] - The default slack factor of cables.\n * @property {number} [segments=20] - The number of segments in cables.\n * @property {number} [snapRadius=100] - The radius for snapping to connector elements.\n * @property {number} [dragHandleSize=25] - The size of the drag handles.\n *\n */\n\nclass Patchbay {\n  /**\n   * @type {PatchbayConfig}\n   */\n  config = {\n    container: document.body,\n    gravity: 1,\n    iterations: 5,\n    color: \"#000000\",\n    slack: 1.1,\n    segments: 20,\n    snapRadius: 100,\n    dragHandleSize: 20,\n    lineThickness: 2,\n    snapElementSelector: \".cable-connector\",\n    zIndex: 9999,\n  };\n\n  /**\n   * @param {Partial<PatchbayConfig>} [config] - The configuration object to override default settings.\n   */\n  constructor(config = {}) {\n    this.config = { ...this.config, ...config };\n    this.cables = [];\n\n    if (!this.config.container) {\n      throw new Error(\"No container element provided for patchbay\");\n    }\n\n    this.root = this.createRootElement();\n    this.config.container.appendChild(this.root);\n  }\n\n  createRootElement() {\n    const root = document.createElement(\"div\");\n\n    root.classList.add(\"patchbay-container\");\n    root.style.position = \"fixed\";\n    root.style.top = \"0\";\n    root.style.bottom = \"0\";\n    root.style.left = \"0\";\n    root.style.right = \"0\";\n    root.style.width = \"100%\";\n    root.style.height = \"100%\";\n    root.style.zIndex = this.config.zIndex || 9999;\n    root.style.pointerEvents = \"none\";\n\n    return root;\n  }\n\n  /**\n   * Create a new cable and add it to the patchbay.\n   *\n   * @param {HTMLElement} startElement - The start element to attach the cable to.\n   * @param {HTMLElement} endElement - The end element to attach the cable to.\n   * @param {Partial<CableConfig>} [cableConfig] - Override default cable settings for this cable.\n   * @returns {Cable}\n   */\n  connect(startElement, endElement, cableConfig = {}) {\n    const cableSettings = { ...this.config, ...cableConfig };\n\n    // Don't pass container to cable\n    delete cableSettings.container;\n\n    const cable = new Cable({\n      start: startElement,\n      end: endElement,\n      ...cableSettings,\n    });\n    this.cables.push(cable);\n    this.root.appendChild(cable.element);\n    return cable;\n  }\n\n  /**\n   *\n   * @param {Point|{x: number, y: number}} startPoint\n   * @param {Point|{x: number, y: number}} endPoint\n   * @param cableConfig\n   */\n  connectPoints(startPoint, endPoint, cableConfig = {}) {\n    const cableSettings = { ...this.config, ...cableConfig };\n\n    // Don't pass container to cable\n    delete cableSettings.container;\n\n    const cable = new Cable({\n      start: startPoint,\n      end: endPoint,\n      ...cableSettings,\n    });\n    this.cables.push(cable);\n    this.root.appendChild(cable.element);\n\n    return cable;\n  }\n\n  startCable(startPoint, cableConfig = {}) {\n    const cableSettings = { ...this.config, ...cableConfig };\n\n    // Don't pass container to cable\n    delete cableSettings.container;\n\n    const cable = new Cable({\n      start: startPoint,\n      end: startPoint,\n      ...cableSettings,\n    });\n\n    cable.startDragging(\"end\");\n    cable.update();\n\n    this.cables.push(cable);\n    this.root.appendChild(cable.element);\n\n    return cable;\n  }\n\n  /**\n   * Remove a cable from the patchbay.\n   * @param {Cable} cable - The Cable instance to remove.\n   */\n  removeCable(cable) {\n    const index = this.cables.indexOf(cable);\n    if (index > -1) {\n      this.root.removeChild(cable.element);\n      this.cables.splice(index, 1);\n    }\n  }\n\n  /**\n   * Update the physics simulation for all cables.\n   */\n  update() {\n    for (let cable of this.cables) {\n      cable.update();\n    }\n  }\n\n  /**\n   * Start the animation loop.\n   */\n  start() {\n    this.isRunning = true;\n    this.loop();\n  }\n\n  /**\n   * Animation loop for physics simulation.\n   */\n  loop() {\n    this.update();\n    requestAnimationFrame(() => this.loop());\n  }\n\n  /**\n   * Stop the animation loop.\n   */\n  stop() {\n    this.isRunning = false;\n    cancelAnimationFrame(this.loop);\n  }\n}\n\nexport default Patchbay;\n"],"names":["Point","x","y","gravity","vx","vy","Cable","config","__publicField","element","startPos","endPos","points","dx","dy","segmentLength","i","t","height","left","top","width","e","handle","event","end","clientX","clientY","draggedPoint","snapTarget","center","potentialTargets","closestElement","closestDistance","rect","centerX","centerY","distance","_","index","segment","j","p1","p2","difference","offsetX","offsetY","start","length","angle","point","Patchbay","root","startElement","endElement","cableConfig","cableSettings","cable","startPoint","endPoint"],"mappings":"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"}