{"version":3,"file":"patchbay.es.js","sources":["../src/Point.js","../src/Cable.js","../src/Patchbay.js"],"sourcesContent":["class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.oldX = x;\n    this.oldY = y;\n  }\n\n  update(gravity) {\n    const vx = this.x - this.oldX;\n    const vy = this.y - this.oldY + gravity;\n\n    this.oldX = this.x;\n    this.oldY = this.y;\n\n    this.x += vx;\n    this.y += vy;\n  }\n}\n\nexport default Point;\n","import Point from \"./Point\";\n\n/**\n * @typedef {Object} CableConfig\n * @property {HTMLElement|Point} start - The start element to attach the cable to.\n * @property {HTMLElement|Point} end - The end element to attach the cable to.\n * @property {string} [color='#000000'] - The color of the cable.\n * @property {number} [dragHandleSize=25] - The size of the drag handles.\n * @property {number} [gravity=1] - The gravity factor of the cable.\n * @property {number} [iterations=5] - The number of iterations to solve constraints.\n * @property {number} [lineThickness=2] - The thickness of the cable line.\n * @property {number} [segments=20] - The number of segments in the cable.\n * @property {number} [slack=1.1] - The slack factor of the cable.\n * @property {number} [snapRadius=100] - The radius for snapping to connector elements.\n * @property {string} [snapTargetSelector='.cable-connector'] - The selector for snap target elements.\n * @property {boolean} [draggable=true] - Whether the cable start/end points are draggable.\n */\n\nclass Cable {\n  config = {\n    color: \"#000000\",\n    dragHandleSize: 25,\n    gravity: 1,\n    iterations: 5,\n    lineThickness: 2,\n    segments: 20,\n    slack: 1.1,\n    snapRadius: 100,\n    snapTargetSelector: \".cable-connector\",\n    draggable: true,\n  };\n\n  /**\n   * @param {CableConfig} [config] - The configuration object to override default settings.\n   */\n  constructor(config = {}) {\n    this.config = { ...this.config, ...config };\n    this.start = this.config.start;\n    this.end = this.config.end;\n\n    this.isDragging = false;\n    this.draggedEnd = null;\n\n    this.element = this.createMainElement();\n    this.points = this.initializePoints();\n    this.segmentElements = this.createSegmentElements();\n\n    if (this.config.draggable) {\n      this.setupDragHandles();\n      this.setupDragEvents();\n    }\n  }\n\n  createMainElement() {\n    const element = document.createElement(\"div\");\n    element.classList.add(\"cable-container\");\n    element.style.position = \"fixed\";\n    element.style.top = \"0\";\n    element.style.left = \"0\";\n    element.style.pointerEvents = \"none\";\n    return element;\n  }\n\n  initializePoints() {\n    const startPos = this.getElementCenter(this.start);\n    const endPos = this.getElementCenter(this.end);\n    const points = [new Point(startPos.x, startPos.y)];\n    const dx = endPos.x - startPos.x;\n    const dy = endPos.y - startPos.y;\n    const totalLength = Math.sqrt(dx * dx + dy * dy) * this.config.slack;\n    const segmentLength = totalLength / (this.config.segments - 1);\n\n    for (let i = 1; i < this.config.segments - 1; i++) {\n      const t = i / (this.config.segments - 1);\n      points.push(\n        new Point(\n          startPos.x + dx * t + (Math.random() - 0.5) * segmentLength,\n          startPos.y + dy * t + (Math.random() - 0.5) * segmentLength,\n        ),\n      );\n    }\n    points.push(new Point(endPos.x, endPos.y));\n    return points;\n  }\n\n  /**\n   * Get the center of an element or point.\n   *\n   * @param {HTMLElement|Point|{x: number, y: number}} element\n   * @returns {{x, y}|null|{x: number, y: number}}\n   */\n  getElementCenter(element) {\n    if (element instanceof Point || (element.hasOwnProperty(\"x\") && element.hasOwnProperty(\"y\"))) {\n      return {\n        x: element.x,\n        y: element.y,\n      };\n    }\n\n    if (element instanceof HTMLElement) {\n      const { height, left, top, width } = element.getBoundingClientRect();\n      return {\n        x: left + width / 2,\n        y: top + height / 2,\n      };\n    }\n\n    return null;\n  }\n\n  setupDragHandles() {\n    this.startHandle = this.createDragHandle();\n    this.endHandle = this.createDragHandle();\n    this.element.appendChild(this.startHandle);\n    this.element.appendChild(this.endHandle);\n  }\n\n  setupDragEvents() {\n    this.startHandle.addEventListener(\"mousedown\", (e) => this.startDragging(e, \"start\"));\n    this.endHandle.addEventListener(\"mousedown\", (e) => this.startDragging(e, \"end\"));\n\n    document.addEventListener(\"mousemove\", (e) => this.drag(e));\n    document.addEventListener(\"mouseup\", (e) => this.stopDragging(e));\n  }\n\n  createDragHandle() {\n    const handle = document.createElement(\"div\");\n    handle.classList.add(\"cable-drag-handle\");\n    handle.style.width = `${this.config.dragHandleSize}px`;\n    handle.style.height = `${this.config.dragHandleSize}px`;\n    handle.style.position = \"absolute\";\n    handle.style.borderRadius = \"50%\";\n    handle.style.backgroundColor = \"transparent\";\n    handle.style.pointerEvents = \"all\";\n    handle.style.cursor = \"move\";\n    handle.style.zIndex = \"9999\";\n    return handle;\n  }\n\n  startDragging(event, end) {\n    this.isDragging = true;\n    this.draggedEnd = end;\n\n    if (end === \"start\") {\n      this.start = null;\n    } else {\n      this.end = null;\n    }\n  }\n\n  drag(event) {\n    if (!this.isDragging) return;\n    const { clientX, clientY } = event;\n    if (this.draggedEnd === \"start\") {\n      this.points[0].x = clientX;\n      this.points[0].y = clientY;\n    } else {\n      this.points[this.points.length - 1].x = clientX;\n      this.points[this.points.length - 1].y = clientY;\n    }\n\n    this.update();\n  }\n\n  stopDragging() {\n    if (!this.isDragging) return;\n\n    const draggedPoint = this.draggedEnd === \"start\" ? this.points[0] : this.points[this.points.length - 1];\n    const snapTarget = this.findSnapTarget(draggedPoint.x, draggedPoint.y);\n\n    if (snapTarget) {\n      if (this.draggedEnd === \"start\") {\n        this.start = snapTarget;\n      } else {\n        this.end = snapTarget;\n      }\n      const center = this.getElementCenter(snapTarget);\n      draggedPoint.x = center.x;\n      draggedPoint.y = center.y;\n    }\n\n    this.isDragging = false;\n    this.draggedEnd = null;\n    this.update();\n  }\n\n  findSnapTarget(x, y) {\n    const potentialTargets = document.querySelectorAll(this.config.snapTargetSelector);\n\n    let closestElement = null;\n    let closestDistance = Infinity;\n\n    for (let element of potentialTargets) {\n      const rect = element.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        closestElement = element;\n      }\n    }\n\n    // Only return the closest element if it's within the snap radius\n    return closestDistance <= this.config.snapRadius ? closestElement : null;\n  }\n\n  createSegmentElements() {\n    return this.points.slice(0, -1).map((_, index) => {\n      const segment = document.createElement(\"div\");\n      segment.classList.add(\"cable-segment\");\n      segment.style.position = \"absolute\";\n      segment.style.background = this.config.color;\n      segment.style.height = this.config.lineThickness + \"px\";\n      segment.style.transformOrigin = \"0 50%\";\n      this.element.appendChild(segment);\n      return segment;\n    });\n  }\n\n  update() {\n    if (this.start) {\n      const center = this.getElementCenter(this.start);\n      this.points[0].x = center.x;\n      this.points[0].y = center.y;\n    }\n    if (this.end) {\n      const center = this.getElementCenter(this.end);\n      this.points[this.points.length - 1].x = center.x;\n      this.points[this.points.length - 1].y = center.y;\n    }\n\n    // Apply gravity\n    for (let i = 1; i < this.points.length - 1; i++) {\n      this.points[i].y += this.config.gravity;\n    }\n\n    // Solve constraints\n    for (let j = 0; j < this.config.iterations; j++) {\n      this.solveConstraints();\n    }\n\n    this.render();\n  }\n\n  solveConstraints() {\n    const segmentLength = this.calculateSegmentLength();\n    for (let i = 0; i < this.points.length - 1; i++) {\n      const p1 = this.points[i];\n      const p2 = this.points[i + 1];\n      const dx = p2.x - p1.x;\n      const dy = p2.y - p1.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const difference = (segmentLength - distance) / distance;\n      const offsetX = dx * 0.5 * difference;\n      const offsetY = dy * 0.5 * difference;\n\n      if (i > 0) {\n        p1.x -= offsetX;\n        p1.y -= offsetY;\n      }\n      if (i < this.points.length - 2) {\n        p2.x += offsetX;\n        p2.y += offsetY;\n      }\n    }\n  }\n\n  calculateSegmentLength() {\n    const totalLength = this.calculateTotalLength();\n    return totalLength / (this.config.segments - 1);\n  }\n\n  calculateTotalLength() {\n    const start = this.points[0];\n    const end = this.points[this.points.length - 1];\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    return Math.sqrt(dx * dx + dy * dy) * this.config.slack;\n  }\n\n  render() {\n    this.segmentElements.forEach((segment, index) => {\n      const p1 = this.points[index];\n      const p2 = this.points[index + 1];\n      const dx = p2.x - p1.x;\n      const dy = p2.y - p1.y;\n      const length = Math.sqrt(dx * dx + dy * dy);\n      const angle = Math.atan2(dy, dx);\n\n      segment.style.width = `${length}px`;\n      segment.style.left = `${p1.x}px`;\n      segment.style.top = `${p1.y}px`;\n      segment.style.transform = `rotate(${angle}rad)`;\n    });\n\n    if (this.config.draggable) {\n      this.updateDragHandlePosition(this.startHandle, this.points[0]);\n      this.updateDragHandlePosition(this.endHandle, this.points[this.points.length - 1]);\n    }\n  }\n\n  updateDragHandlePosition(handle, point) {\n    handle.style.left = `${point.x - this.config.dragHandleSize / 2}px`;\n    handle.style.top = `${point.y - this.config.dragHandleSize / 2}px`;\n  }\n}\n\nexport default Cable;\n","import Cable from \"./Cable.js\";\n\n/**\n * @typedef {Object} PatchbayConfig\n * @property {HTMLElement} [container=document.body] - The container element for the patchbay.\n * @property {number} [gravity=1] - The gravity force applied to cables.\n * @property {number} [iterations=5] - The number of constraint solving iterations per update.\n * @property {string} [color='#000000'] - The default color of cables.\n * @property {number} [slack=1.1] - The default slack factor of cables.\n * @property {number} [segments=20] - The number of segments in cables.\n * @property {number} [snapRadius=100] - The radius for snapping to connector elements.\n * @property {number} [dragHandleSize=25] - The size of the drag handles.\n *\n */\n\nclass Patchbay {\n  /**\n   * @type {PatchbayConfig}\n   */\n  config = {\n    container: document.body,\n    gravity: 1,\n    iterations: 5,\n    color: \"#000000\",\n    slack: 1.1,\n    segments: 20,\n    snapRadius: 100,\n    dragHandleSize: 20,\n    lineThickness: 2,\n    snapElementSelector: \".cable-connector\",\n    zIndex: 9999,\n  };\n\n  /**\n   * @param {Partial<PatchbayConfig>} [config] - The configuration object to override default settings.\n   */\n  constructor(config = {}) {\n    this.config = { ...this.config, ...config };\n    this.cables = [];\n\n    if (!this.config.container) {\n      throw new Error(\"No container element provided for patchbay\");\n    }\n\n    this.root = this.createRootElement();\n    this.config.container.appendChild(this.root);\n  }\n\n  createRootElement() {\n    const root = document.createElement(\"div\");\n\n    root.classList.add(\"patchbay-container\");\n    root.style.position = \"fixed\";\n    root.style.top = \"0\";\n    root.style.bottom = \"0\";\n    root.style.left = \"0\";\n    root.style.right = \"0\";\n    root.style.width = \"100%\";\n    root.style.height = \"100%\";\n    root.style.zIndex = this.config.zIndex || 9999;\n    root.style.pointerEvents = \"none\";\n\n    return root;\n  }\n\n  /**\n   * Create a new cable and add it to the patchbay.\n   *\n   * @param {HTMLElement} startElement - The start element to attach the cable to.\n   * @param {HTMLElement} endElement - The end element to attach the cable to.\n   * @param {Partial<CableConfig>} [cableConfig] - Override default cable settings for this cable.\n   * @returns {Cable}\n   */\n  connect(startElement, endElement, cableConfig = {}) {\n    const cableSettings = { ...this.config, ...cableConfig };\n\n    // Don't pass container to cable\n    delete cableSettings.container;\n\n    const cable = new Cable({\n      start: startElement,\n      end: endElement,\n      ...cableSettings,\n    });\n    this.cables.push(cable);\n    this.root.appendChild(cable.element);\n    return cable;\n  }\n\n  /**\n   *\n   * @param {Point|{x: number, y: number}} startPoint\n   * @param {Point|{x: number, y: number}} endPoint\n   * @param cableConfig\n   */\n  connectPoints(startPoint, endPoint, cableConfig = {}) {\n    const cableSettings = { ...this.config, ...cableConfig };\n\n    // Don't pass container to cable\n    delete cableSettings.container;\n\n    const cable = new Cable({\n      start: startPoint,\n      end: endPoint,\n      ...cableSettings,\n    });\n    this.cables.push(cable);\n    this.root.appendChild(cable.element);\n\n    return cable;\n  }\n\n  startCable(startPoint, cableConfig = {}) {\n    const cableSettings = { ...this.config, ...cableConfig };\n\n    // Don't pass container to cable\n    delete cableSettings.container;\n\n    const cable = new Cable({\n      start: startPoint,\n      end: startPoint,\n      ...cableSettings,\n    });\n\n    cable.startDragging(\"end\");\n    cable.update();\n\n    this.cables.push(cable);\n    this.root.appendChild(cable.element);\n\n    return cable;\n  }\n\n  /**\n   * Remove a cable from the patchbay.\n   * @param {Cable} cable - The Cable instance to remove.\n   */\n  removeCable(cable) {\n    const index = this.cables.indexOf(cable);\n    if (index > -1) {\n      this.root.removeChild(cable.element);\n      this.cables.splice(index, 1);\n    }\n  }\n\n  /**\n   * Update the physics simulation for all cables.\n   */\n  update() {\n    for (let cable of this.cables) {\n      cable.update();\n    }\n  }\n\n  /**\n   * Start the animation loop.\n   */\n  start() {\n    this.isRunning = true;\n    this.loop();\n  }\n\n  /**\n   * Animation loop for physics simulation.\n   */\n  loop() {\n    this.update();\n    requestAnimationFrame(() => this.loop());\n  }\n\n  /**\n   * Stop the animation loop.\n   */\n  stop() {\n    this.isRunning = false;\n    cancelAnimationFrame(this.loop);\n  }\n}\n\nexport default Patchbay;\n"],"names":["Point","x","y","gravity","vx","vy","Cable","config","__publicField","element","startPos","endPos","points","dx","dy","segmentLength","i","t","height","left","top","width","e","handle","event","end","clientX","clientY","draggedPoint","snapTarget","center","potentialTargets","closestElement","closestDistance","rect","centerX","centerY","distance","_","index","segment","j","p1","p2","difference","offsetX","offsetY","start","length","angle","point","Patchbay","root","startElement","endElement","cableConfig","cableSettings","cable","startPoint","endPoint"],"mappings":"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"}